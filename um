#!/usr/bin/env python
"""Undermountain Startup Script."""
import gevent
import logging
import sys
from logging.handlers import RotatingFileHandler
from mud.game import Game
from settings import MODULES


def setup_logging():
    """Set up the format and output of the logging module."""
    root_logger = logging.getLogger()
    root_logger.setLevel(logging.DEBUG)

    log_format = "%(asctime)-15s - %(levelname)s - %(message)s"
    formatter = logging.Formatter(log_format)

    log_file = RotatingFileHandler("log/undermountain.log")
    log_file.setFormatter(formatter)
    root_logger.addHandler(log_file)

    log_console = logging.StreamHandler()
    log_console.setFormatter(formatter)
    root_logger.addHandler(log_console)


setup_logging()

def get_python_version_string():
    ver = sys.version_info
    major, minor, micro, _, _ = sys.version_info
    return '.'.join(map(str, [major, minor, micro]))

engine_version = Game.get_version()
python_version = get_python_version_string()

print("""\

  __ _______
 /  /       \ -----------------------------------------------------------------
/  /  /  /  /    Undermountain Python MUD Server v{} - Python v{}
\____/__/__/ ------------------------------------------------------------------

""".format(engine_version, python_version))


def print_argument_help():
    """Output the valid arguments for the user."""
    print()
    print("Usage: ./um <command>")
    print()
    print("Valid commands:")
    print("* start - Start the MUD")
    print()
    print("Not Yet Implemented:")
    print("* backup [identifier] - Backup the MUD")
    print("* restore <identifier> - Restore the MUD")
    print()


if len(sys.argv) == 1:
    print("No arguments provided.")
    print_argument_help()
    sys.exit(0)

arg = sys.argv[1]

if arg == "start":
    # loop.set_default_executor(ThreadPoolExecutor(1000))
    game = Game(modules=MODULES, logging=True)
    start = gevent.spawn(game.start)
    try:
        start.join()
    except KeyboardInterrupt:
        print()
        logging.info("Attempting a clean shutdown.")
        logging.info("Type CTRL+C to kill the process immediately.")
        try:
            game.shutdown()
            logging.info("Clean shutdown complete.")
        except KeyboardInterrupt:
            print()
            logging.info("The process has been killed.")

else:
    print("Invalid argument '{}'".format(arg))
    print_argument_help()
